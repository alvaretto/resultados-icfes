#!/usr/bin/env python3
"""
Script para verificar que todo est√° configurado correctamente
antes de ejecutar la descarga masiva
"""

import sys
import os

def verificar_python():
    """Verifica la versi√≥n de Python"""
    print('\nüêç Verificando Python...')
    version = sys.version_info
    if version.major >= 3 and version.minor >= 7:
        print(f'   ‚úÖ Python {version.major}.{version.minor}.{version.micro} - OK')
        return True
    else:
        print(f'   ‚ùå Python {version.major}.{version.minor}.{version.micro} - Requiere Python 3.7+')
        return False

def verificar_librerias():
    """Verifica que las librer√≠as necesarias est√©n instaladas"""
    print('\nüìö Verificando librer√≠as...')
    
    librerias = {
        'pandas': 'Lectura de archivos Excel',
        'selenium': 'Automatizaci√≥n del navegador',
        'webdriver_manager': 'Gesti√≥n de drivers',
        'openpyxl': 'Soporte para archivos .xlsx',
        'xlrd': 'Soporte para archivos .xls'
    }
    
    todas_ok = True
    for libreria, descripcion in librerias.items():
        try:
            __import__(libreria)
            print(f'   ‚úÖ {libreria:20} - OK ({descripcion})')
        except ImportError:
            print(f'   ‚ùå {libreria:20} - NO INSTALADA ({descripcion})')
            todas_ok = False
    
    return todas_ok

def verificar_firefox():
    """Verifica que Firefox est√© instalado"""
    print('\nü¶ä Verificando Firefox...')
    
    import subprocess
    try:
        result = subprocess.run(['firefox', '--version'], 
                              capture_output=True, 
                              text=True, 
                              timeout=5)
        if result.returncode == 0:
            version = result.stdout.strip()
            print(f'   ‚úÖ {version} - OK')
            return True
        else:
            print('   ‚ùå Firefox no encontrado')
            return False
    except FileNotFoundError:
        print('   ‚ùå Firefox no est√° instalado')
        return False
    except Exception as e:
        print(f'   ‚ö†Ô∏è  No se pudo verificar Firefox: {e}')
        return False

def verificar_archivo_excel():
    """Verifica que el archivo Excel exista"""
    print('\nüìÑ Verificando archivo Excel...')
    
    ruta = '/home/proyectos/Escritorio/Resultados-ICFES-2025/INSCRITOS_EXAMEN SABER 11 (36).xls'
    
    if os.path.exists(ruta):
        size = os.path.getsize(ruta)
        print(f'   ‚úÖ Archivo encontrado - {size:,} bytes')
        
        # Intentar leerlo
        try:
            import pandas as pd
            df = pd.read_excel(ruta, skiprows=3)
            df.columns = df.iloc[0]
            df = df[1:].reset_index(drop=True)
            print(f'   ‚úÖ Archivo legible - {len(df)} estudiantes encontrados')
            return True
        except Exception as e:
            print(f'   ‚ùå Error al leer el archivo: {e}')
            return False
    else:
        print(f'   ‚ùå Archivo no encontrado: {ruta}')
        return False

def verificar_carpetas():
    """Verifica que las carpetas necesarias existan o puedan crearse"""
    print('\nüìÅ Verificando carpetas...')
    
    carpetas = ['pdfs_descargados', 'logs']
    todas_ok = True
    
    for carpeta in carpetas:
        try:
            os.makedirs(carpeta, exist_ok=True)
            if os.path.exists(carpeta) and os.access(carpeta, os.W_OK):
                print(f'   ‚úÖ {carpeta:20} - OK (con permisos de escritura)')
            else:
                print(f'   ‚ùå {carpeta:20} - Sin permisos de escritura')
                todas_ok = False
        except Exception as e:
            print(f'   ‚ùå {carpeta:20} - Error: {e}')
            todas_ok = False
    
    return todas_ok

def verificar_conexion_icfes():
    """Verifica la conexi√≥n al portal del ICFES"""
    print('\nüåê Verificando conexi√≥n al portal ICFES...')
    
    try:
        import requests
        url = 'http://resultadossaber11.icfes.edu.co/'
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            print(f'   ‚úÖ Portal accesible - Status {response.status_code}')
            return True
        else:
            print(f'   ‚ö†Ô∏è  Portal responde con status {response.status_code}')
            return False
    except Exception as e:
        print(f'   ‚ùå No se pudo conectar al portal: {e}')
        return False

def probar_selenium():
    """Prueba que Selenium pueda iniciar Firefox"""
    print('\nüîß Probando Selenium con Firefox...')
    
    try:
        from selenium import webdriver
        from selenium.webdriver.firefox.service import Service
        from selenium.webdriver.firefox.options import Options
        from webdriver_manager.firefox import GeckoDriverManager
        
        print('   - Descargando/verificando GeckoDriver...')
        firefox_options = Options()
        firefox_options.add_argument('--headless')
        
        service = Service(GeckoDriverManager().install())
        driver = webdriver.Firefox(service=service, options=firefox_options)
        
        print('   - Navegando a una p√°gina de prueba...')
        driver.get('http://example.com')
        
        title = driver.title
        driver.quit()
        
        print(f'   ‚úÖ Selenium funciona correctamente (t√≠tulo: "{title}")')
        return True
        
    except Exception as e:
        print(f'   ‚ùå Error al probar Selenium: {e}')
        return False

def main():
    """Funci√≥n principal"""
    print('='*80)
    print('üîç VERIFICACI√ìN DE CONFIGURACI√ìN - DESCARGADOR ICFES')
    print('='*80)
    
    resultados = {
        'Python': verificar_python(),
        'Librer√≠as': verificar_librerias(),
        'Firefox': verificar_firefox(),
        'Archivo Excel': verificar_archivo_excel(),
        'Carpetas': verificar_carpetas(),
        'Conexi√≥n ICFES': verificar_conexion_icfes(),
        'Selenium': probar_selenium()
    }
    
    print('\n' + '='*80)
    print('üìä RESUMEN DE VERIFICACI√ìN')
    print('='*80)
    
    for componente, resultado in resultados.items():
        estado = '‚úÖ' if resultado else '‚ùå'
        print(f'{estado} {componente}')
    
    print('\n' + '='*80)
    
    if all(resultados.values()):
        print('‚úÖ ¬°TODO EST√Å CONFIGURADO CORRECTAMENTE!')
        print('üëâ Puedes ejecutar el script principal: python3 descargar_resultados_icfes.py')
    else:
        print('‚ùå HAY PROBLEMAS DE CONFIGURACI√ìN')
        print('üëâ Por favor, revisa los errores anteriores y corr√≠gelos antes de continuar')
        print('\nüí° Sugerencias:')
        
        if not resultados['Python']:
            print('   - Actualiza Python a la versi√≥n 3.7 o superior')
        
        if not resultados['Librer√≠as']:
            print('   - Activa el entorno virtual: source venv/bin/activate')
            print('   - O instala las librer√≠as: pip install pandas selenium webdriver-manager openpyxl xlrd')
        
        if not resultados['Firefox']:
            print('   - Instala Firefox: sudo pacman -S firefox (Arch) o sudo apt install firefox (Ubuntu)')
        
        if not resultados['Archivo Excel']:
            print('   - Verifica que el archivo Excel est√© en la ruta correcta')
            print('   - Verifica que el archivo no est√© corrupto')
        
        if not resultados['Carpetas']:
            print('   - Verifica los permisos de escritura en el directorio actual')
        
        if not resultados['Conexi√≥n ICFES']:
            print('   - Verifica tu conexi√≥n a Internet')
            print('   - El portal del ICFES podr√≠a estar temporalmente no disponible')
        
        if not resultados['Selenium']:
            print('   - Verifica que Firefox est√© correctamente instalado')
            print('   - Intenta reinstalar las librer√≠as de Selenium')
    
    print('='*80)

if __name__ == '__main__':
    main()

