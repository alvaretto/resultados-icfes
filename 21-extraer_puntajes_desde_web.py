#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para extraer puntajes de resultados ICFES directamente desde la p√°gina web
y generar archivo Excel consolidado.

Fase 2 del proyecto: Extracci√≥n de puntajes y consolidaci√≥n en Excel
"""

import pandas as pd
import os
import sys
import time
import re
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.firefox.options import Options
from selenium.webdriver.support.ui import Select

# Configuraci√≥n
ARCHIVO_EXCEL_ENTRADA = 'INSCRITOS_EXAMEN SABER 11 (36).xls'
ARCHIVO_EXCEL_SALIDA = 'RESULTADOS-ICFES-AULA-REGULAR.xlsx'
CARPETA_LOGS = 'logs'
URL_ICFES = 'http://resultadossaber11.icfes.edu.co/'

# Mapeo de tipos de documento
TIPOS_DOCUMENTO = {
    'TI': 'TARJETA DE IDENTIDAD',
    'CC': 'C√âDULA DE CIUDADAN√çA'
}

class ExtractorPuntajesICFES:
    """Clase para extraer puntajes de resultados ICFES desde la web"""
    
    def __init__(self, modo_prueba=False):
        self.modo_prueba = modo_prueba
        self.driver = None
        self.resultados = []
        self.errores = []
        
    def iniciar_navegador(self):
        """Inicia el navegador Firefox"""
        print('\nüåê Iniciando navegador Firefox...')
        
        options = Options()
        # No usar headless para poder resolver CAPTCHAs
        # options.add_argument('--headless')
        
        self.driver = webdriver.Firefox(options=options)
        self.driver.maximize_window()
        print('‚úÖ Navegador iniciado')
        
    def navegar_a_icfes(self):
        """Navega a la p√°gina del ICFES"""
        print(f'\nüåê Navegando a: {URL_ICFES}')
        self.driver.get(URL_ICFES)
        time.sleep(3)
        print('‚úÖ P√°gina cargada')
        
    def ingresar_datos_estudiante(self, tipo_doc, numero_doc):
        """Ingresa los datos del estudiante en el formulario"""
        try:
            print(f'\nüìù Ingresando datos: {tipo_doc} - {numero_doc}')
            
            # Seleccionar tipo de documento
            wait = WebDriverWait(self.driver, 10)
            
            # Buscar el ng-select para tipo de documento
            print('   - Buscando selector de tipo de documento...')
            ng_select = wait.until(EC.presence_of_element_located(
                (By.CSS_SELECTOR, 'ng-select[formcontrolname="tipoDocumento"]')
            ))
            
            # Hacer clic en el ng-select
            ng_select.click()
            time.sleep(1)
            
            # Buscar la opci√≥n correcta
            tipo_doc_texto = TIPOS_DOCUMENTO.get(tipo_doc, tipo_doc)
            print(f'   - Buscando opci√≥n: {tipo_doc_texto}')
            
            opciones = self.driver.find_elements(By.CSS_SELECTOR, '.ng-option')
            for opcion in opciones:
                if tipo_doc_texto.upper() in opcion.text.upper():
                    opcion.click()
                    print(f'   ‚úÖ Tipo de documento seleccionado: {tipo_doc_texto}')
                    break
            
            time.sleep(1)
            
            # Ingresar n√∫mero de documento
            print('   - Ingresando n√∫mero de documento...')
            campo_doc = wait.until(EC.presence_of_element_located(
                (By.CSS_SELECTOR, 'input[formcontrolname="numeroDocumento"]')
            ))
            campo_doc.clear()
            campo_doc.send_keys(str(numero_doc))
            print(f'   ‚úÖ N√∫mero de documento ingresado: {numero_doc}')
            
            time.sleep(2)
            
            return True
            
        except Exception as e:
            print(f'   ‚ùå Error al ingresar datos: {e}')
            return False
    
    def esperar_login_manual(self):
        """Espera a que el usuario resuelva el CAPTCHA y haga login"""
        print('\n‚è∏Ô∏è  PAUSA PARA LOGIN MANUAL')
        print('='*80)
        print('üëâ Por favor:')
        print('   1. Resuelve el CAPTCHA')
        print('   2. Haz clic en "Ingresar"')
        print('   3. Espera a que cargue la p√°gina de resultados')
        print('   4. Presiona ENTER en esta terminal cuando veas los resultados')
        print('='*80)
        
        input('\n‚è∏Ô∏è  Presiona ENTER cuando hayas completado el login y veas los resultados...')
        
        print('\n‚úÖ Continuando con la extracci√≥n de puntajes...')
        time.sleep(2)
        
    def extraer_puntaje_global(self):
        """Extrae el puntaje global de la p√°gina principal"""
        try:
            print('\nüîç Extrayendo puntaje global...')

            # Esperar a que la p√°gina est√© cargada
            time.sleep(3)

            # Obtener el HTML de la p√°gina
            html = self.driver.page_source

            # Buscar el puntaje global (formato: XXX/500)
            puntaje_global = None
            match_global = re.search(r'(\d{1,3})/500', html)
            if match_global:
                puntaje_global = int(match_global.group(1))
                print(f'   ‚úÖ Puntaje Global: {puntaje_global}/500')
            else:
                print('   ‚ö†Ô∏è  Puntaje Global no encontrado en HTML')
                # Intentar buscar en el texto visible
                try:
                    body_text = self.driver.find_element(By.TAG_NAME, 'body').text
                    match_text = re.search(r'(\d{1,3})/500', body_text)
                    if match_text:
                        puntaje_global = int(match_text.group(1))
                        print(f'   ‚úÖ Puntaje Global encontrado en texto: {puntaje_global}/500')
                except:
                    pass

            return puntaje_global

        except Exception as e:
            print(f'   ‚ùå Error al extraer puntaje global: {e}')
            return None

    def extraer_puntaje_de_area(self, nombre_area):
        """
        Hace clic en un √°rea espec√≠fica y extrae su puntaje

        Args:
            nombre_area: Nombre del √°rea (ej: "Lectura Cr√≠tica")

        Returns:
            int: Puntaje del √°rea o None si no se pudo extraer
        """
        try:
            print(f'\n   üîç Extrayendo puntaje de: {nombre_area}')

            # Guardar URL actual para volver
            url_principal = self.driver.current_url

            # Buscar el elemento clickeable del √°rea
            # Intentar varios selectores posibles
            selectores = [
                f"//a[contains(text(), '{nombre_area}')]",
                f"//button[contains(text(), '{nombre_area}')]",
                f"//div[contains(text(), '{nombre_area}')]",
                f"//*[contains(text(), '{nombre_area}') and (self::a or self::button or self::div)]"
            ]

            elemento_clickeado = False
            for selector in selectores:
                try:
                    wait = WebDriverWait(self.driver, 5)
                    elemento = wait.until(EC.element_to_be_clickable((By.XPATH, selector)))

                    if elemento.is_displayed():
                        print(f'      ‚úÖ Elemento encontrado, haciendo clic...')
                        elemento.click()
                        elemento_clickeado = True
                        time.sleep(3)  # Esperar a que cargue la nueva vista
                        break
                except:
                    continue

            if not elemento_clickeado:
                print(f'      ‚ö†Ô∏è  No se pudo hacer clic en el √°rea')
                return None

            # Buscar el puntaje en la nueva p√°gina
            # El puntaje podr√≠a estar en diferentes formatos
            html = self.driver.page_source
            body_text = self.driver.find_element(By.TAG_NAME, 'body').text

            # Patrones para buscar puntajes
            patrones = [
                r'Puntaje[:\s]+(\d{1,3})',
                r'puntaje[:\s]+(\d{1,3})',
                r'PUNTAJE[:\s]+(\d{1,3})',
                r'Score[:\s]+(\d{1,3})',
                r'(\d{1,3})\s*/\s*100',
                r'Tu puntaje[:\s]+(\d{1,3})',
            ]

            puntaje = None
            for patron in patrones:
                match = re.search(patron, body_text, re.IGNORECASE)
                if match:
                    puntaje_candidato = int(match.group(1))
                    # Validar que sea un puntaje razonable (0-100)
                    if 0 <= puntaje_candidato <= 100:
                        puntaje = puntaje_candidato
                        print(f'      ‚úÖ Puntaje encontrado: {puntaje}')
                        break

            if puntaje is None:
                print(f'      ‚ö†Ô∏è  No se encontr√≥ puntaje en la p√°gina del √°rea')
                # Guardar HTML para an√°lisis
                with open(f'debug_{nombre_area.replace(" ", "_")}.html', 'w', encoding='utf-8') as f:
                    f.write(html)
                print(f'      üíæ HTML guardado para an√°lisis: debug_{nombre_area.replace(" ", "_")}.html')

            # Volver a la p√°gina principal
            self.driver.back()
            time.sleep(2)

            return puntaje

        except Exception as e:
            print(f'      ‚ùå Error al extraer puntaje de {nombre_area}: {e}')
            # Intentar volver a la p√°gina principal
            try:
                self.driver.back()
                time.sleep(2)
            except:
                pass
            return None

    def extraer_puntajes_de_pagina(self):
        """Extrae todos los puntajes de la p√°gina de resultados"""
        try:
            print('\nüîç Extrayendo puntajes de la p√°gina...')

            # Extraer puntaje global
            puntaje_global = self.extraer_puntaje_global()

            # √Åreas a extraer
            areas = {
                'Lectura Cr√≠tica': 'Lectura Cr√≠tica',
                'Matem√°ticas': 'Matem√°ticas',
                'Sociales y Ciudadanas': 'Sociales y Ciudadanas',
                'Ciencias Naturales': 'Ciencias Naturales',
                'Ingl√©s': 'Ingl√©s'
            }

            puntajes = {
                'Puntaje Global': puntaje_global
            }

            # Extraer puntaje de cada √°rea
            for nombre_area, clave in areas.items():
                puntaje_area = self.extraer_puntaje_de_area(nombre_area)
                puntajes[clave] = puntaje_area

            # Mostrar resumen
            print('\nüìä RESUMEN DE PUNTAJES EXTRA√çDOS:')
            print('   ' + '-'*60)
            for area, puntaje in puntajes.items():
                if puntaje is not None:
                    print(f'   ‚úÖ {area}: {puntaje}')
                else:
                    print(f'   ‚ùå {area}: No extra√≠do')
            print('   ' + '-'*60)

            return puntajes

        except Exception as e:
            print(f'   ‚ùå Error al extraer puntajes: {e}')
            return None
    
    def hacer_logout(self):
        """Cierra la sesi√≥n del estudiante"""
        try:
            print('\nüö™ Cerrando sesi√≥n...')
            
            # Buscar el men√∫ de usuario
            wait = WebDriverWait(self.driver, 5)
            boton_menu = wait.until(EC.element_to_be_clickable(
                (By.CSS_SELECTOR, 'button.dropdown-toggle')
            ))
            boton_menu.click()
            time.sleep(1)
            
            # Buscar la opci√≥n de "Salir"
            opciones_menu = self.driver.find_elements(By.CSS_SELECTOR, '.dropdown-menu a, .dropdown-menu button')
            
            for opcion in opciones_menu:
                texto = opcion.text.strip().lower()
                if 'salir' in texto or 'cerrar' in texto or 'logout' in texto:
                    opcion.click()
                    print('   ‚úÖ Sesi√≥n cerrada')
                    time.sleep(2)
                    return True
            
            # Si no encontramos opci√≥n de salir, navegar a login
            self.driver.get(URL_ICFES)
            time.sleep(2)
            return True
            
        except Exception as e:
            print(f'   ‚ö†Ô∏è  Error al cerrar sesi√≥n: {e}')
            self.driver.get(URL_ICFES)
            time.sleep(2)
            return True
    
    def procesar_estudiante(self, estudiante):
        """Procesa un estudiante completo"""
        nombre_completo = f"{estudiante['Primer Apellido']} {estudiante['Segundo Apellido']} {estudiante['Primer Nombre']} {estudiante.get('Segundo Nombre', '')}".strip()
        
        print('\n' + '='*80)
        print(f'üë§ PROCESANDO: {nombre_completo}')
        print('='*80)
        
        try:
            # Navegar a la p√°gina
            self.navegar_a_icfes()
            
            # Ingresar datos
            if not self.ingresar_datos_estudiante(estudiante['Tipo de documento'], estudiante['N√∫mero de documento']):
                raise Exception('Error al ingresar datos')
            
            # Esperar login manual
            self.esperar_login_manual()
            
            # Extraer puntajes
            puntajes = self.extraer_puntajes_de_pagina()
            
            if puntajes:
                resultado = {
                    'Primer Apellido': estudiante['Primer Apellido'],
                    'Segundo Apellido': estudiante['Segundo Apellido'],
                    'Primer Nombre': estudiante['Primer Nombre'],
                    'Segundo Nombre': estudiante.get('Segundo Nombre', ''),
                    'Tipo de documento': estudiante['Tipo de documento'],
                    'N√∫mero de documento': estudiante['N√∫mero de documento'],
                    **puntajes
                }
                self.resultados.append(resultado)
                print(f'\n‚úÖ Estudiante procesado exitosamente')
            else:
                raise Exception('No se pudieron extraer puntajes')
            
            # Cerrar sesi√≥n
            self.hacer_logout()
            
            return True
            
        except Exception as e:
            print(f'\n‚ùå Error al procesar estudiante: {e}')
            self.errores.append({
                'estudiante': nombre_completo,
                'error': str(e)
            })
            return False
    
    def cerrar_navegador(self):
        """Cierra el navegador"""
        if self.driver:
            print('\nüîí Cerrando navegador...')
            self.driver.quit()
            print('‚úÖ Navegador cerrado')

def main():
    """Funci√≥n principal"""
    print('\n' + '='*80)
    print('üéì EXTRACTOR DE PUNTAJES ICFES - FASE 2')
    print('='*80)
    
    # Verificar archivo de entrada
    if not os.path.exists(ARCHIVO_EXCEL_ENTRADA):
        print(f'\n‚ùå Error: No se encuentra el archivo {ARCHIVO_EXCEL_ENTRADA}')
        sys.exit(1)
    
    # Leer archivo Excel
    print(f'\nüìÇ Leyendo archivo: {ARCHIVO_EXCEL_ENTRADA}')
    df = pd.read_excel(ARCHIVO_EXCEL_ENTRADA, skiprows=3)
    print(f'‚úÖ {len(df)} estudiantes encontrados')
    
    # Preguntar modo
    print('\n' + '='*80)
    print('SELECCIONA EL MODO DE EJECUCI√ìN:')
    print('='*80)
    print('1. Modo PRUEBA (solo 1 estudiante)')
    print('2. Modo COMPLETO (todos los estudiantes)')
    print('='*80)
    
    opcion = input('\nSelecciona una opci√≥n (1 o 2): ').strip()
    
    modo_prueba = (opcion == '1')
    
    if modo_prueba:
        print('\nüß™ Modo PRUEBA activado (1 estudiante)')
        df = df.head(1)
    else:
        print(f'\nüöÄ Modo COMPLETO activado ({len(df)} estudiantes)')
    
    # Crear extractor
    extractor = ExtractorPuntajesICFES(modo_prueba=modo_prueba)
    
    try:
        # Iniciar navegador
        extractor.iniciar_navegador()
        
        # Procesar estudiantes
        for idx, estudiante in df.iterrows():
            extractor.procesar_estudiante(estudiante)
            
            if not modo_prueba and idx < len(df) - 1:
                print('\n‚è∏Ô∏è  Pausa de 3 segundos antes del siguiente estudiante...')
                time.sleep(3)
        
        # Generar Excel de salida
        if extractor.resultados:
            print('\n' + '='*80)
            print('üìä GENERANDO ARCHIVO EXCEL')
            print('='*80)
            
            df_resultados = pd.DataFrame(extractor.resultados)
            df_resultados.to_excel(ARCHIVO_EXCEL_SALIDA, index=False)
            
            print(f'\n‚úÖ Archivo generado: {ARCHIVO_EXCEL_SALIDA}')
            print(f'üìä Total de estudiantes: {len(df_resultados)}')
        
        # Mostrar resumen
        print('\n' + '='*80)
        print('üìä RESUMEN FINAL')
        print('='*80)
        print(f'‚úÖ Estudiantes procesados: {len(extractor.resultados)}')
        print(f'‚ùå Errores: {len(extractor.errores)}')
        
        if extractor.errores:
            print('\n‚ö†Ô∏è  Estudiantes con errores:')
            for error in extractor.errores:
                print(f'   - {error["estudiante"]}: {error["error"]}')
        
    finally:
        extractor.cerrar_navegador()
    
    print('\n' + '='*80)
    print('‚úÖ PROCESO COMPLETADO')
    print('='*80)

if __name__ == '__main__':
    main()

