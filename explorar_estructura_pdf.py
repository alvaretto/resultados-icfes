#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de exploraci√≥n para analizar la estructura de los PDFs del ICFES
y determinar la mejor estrategia para extraer los puntajes.
"""

import pdfplumber
import PyPDF2
import os
import sys

def explorar_con_pdfplumber(pdf_path):
    """Explora el PDF usando pdfplumber"""
    print("\n" + "="*80)
    print("EXPLORACI√ìN CON PDFPLUMBER")
    print("="*80)
    
    try:
        with pdfplumber.open(pdf_path) as pdf:
            print(f"\nüìÑ Archivo: {os.path.basename(pdf_path)}")
            print(f"üìä Total de p√°ginas: {len(pdf.pages)}")
            
            # Analizar cada p√°gina
            for i, page in enumerate(pdf.pages, 1):
                print(f"\n{'‚îÄ'*80}")
                print(f"P√ÅGINA {i}")
                print(f"{'‚îÄ'*80}")
                
                # Extraer texto
                text = page.extract_text()
                if text:
                    print("\nüìù TEXTO EXTRA√çDO:")
                    print(text[:2000])  # Primeros 2000 caracteres
                    if len(text) > 2000:
                        print(f"\n... (texto truncado, total: {len(text)} caracteres)")
                
                # Buscar tablas
                tables = page.extract_tables()
                if tables:
                    print(f"\nüìä TABLAS ENCONTRADAS: {len(tables)}")
                    for j, table in enumerate(tables, 1):
                        print(f"\n  Tabla {j}:")
                        for row in table[:5]:  # Primeras 5 filas
                            print(f"    {row}")
                        if len(table) > 5:
                            print(f"    ... ({len(table)} filas en total)")
                
                # Informaci√≥n de la p√°gina
                print(f"\nüìê Dimensiones: {page.width} x {page.height}")
                
    except Exception as e:
        print(f"‚ùå Error con pdfplumber: {e}")

def explorar_con_pypdf2(pdf_path):
    """Explora el PDF usando PyPDF2"""
    print("\n" + "="*80)
    print("EXPLORACI√ìN CON PyPDF2")
    print("="*80)
    
    try:
        with open(pdf_path, 'rb') as file:
            pdf_reader = PyPDF2.PdfReader(file)
            
            print(f"\nüìÑ Archivo: {os.path.basename(pdf_path)}")
            print(f"üìä Total de p√°ginas: {len(pdf_reader.pages)}")
            
            # Analizar cada p√°gina
            for i, page in enumerate(pdf_reader.pages, 1):
                print(f"\n{'‚îÄ'*80}")
                print(f"P√ÅGINA {i}")
                print(f"{'‚îÄ'*80}")
                
                # Extraer texto
                text = page.extract_text()
                if text:
                    print("\nüìù TEXTO EXTRA√çDO:")
                    print(text[:2000])  # Primeros 2000 caracteres
                    if len(text) > 2000:
                        print(f"\n... (texto truncado, total: {len(text)} caracteres)")
                
    except Exception as e:
        print(f"‚ùå Error con PyPDF2: {e}")

def buscar_puntajes_en_texto(text):
    """Busca patrones de puntajes en el texto"""
    print("\n" + "="*80)
    print("B√öSQUEDA DE PUNTAJES")
    print("="*80)
    
    # Palabras clave a buscar
    keywords = [
        "Lectura Cr√≠tica",
        "Matem√°ticas",
        "Sociales y Ciudadanas",
        "Ciencias Naturales",
        "Ingl√©s",
        "Puntaje Global",
        "puntaje",
        "PUNTAJE",
        "Prueba",
        "PRUEBA",
        "Resultado",
        "RESULTADO"
    ]
    
    print("\nüîç Buscando palabras clave...")
    for keyword in keywords:
        if keyword in text:
            # Encontrar contexto alrededor de la palabra clave
            index = text.find(keyword)
            start = max(0, index - 50)
            end = min(len(text), index + 150)
            context = text[start:end]
            print(f"\n‚úÖ Encontrado: '{keyword}'")
            print(f"   Contexto: ...{context}...")

def main():
    """Funci√≥n principal"""
    print("\n" + "="*80)
    print("üîç EXPLORADOR DE ESTRUCTURA DE PDFs DEL ICFES")
    print("="*80)
    
    # Buscar el primer PDF en la carpeta
    pdf_dir = "pdfs_descargados"
    
    if not os.path.exists(pdf_dir):
        print(f"\n‚ùå Error: No se encuentra la carpeta '{pdf_dir}'")
        sys.exit(1)
    
    pdf_files = [f for f in os.listdir(pdf_dir) if f.endswith('.pdf')]
    
    if not pdf_files:
        print(f"\n‚ùå Error: No se encontraron archivos PDF en '{pdf_dir}'")
        sys.exit(1)
    
    # Usar el primer PDF como ejemplo
    pdf_path = os.path.join(pdf_dir, pdf_files[0])
    
    print(f"\nüìÅ Carpeta: {pdf_dir}")
    print(f"üìÑ Total de PDFs: {len(pdf_files)}")
    print(f"üéØ Analizando: {pdf_files[0]}")
    
    # Explorar con ambas librer√≠as
    explorar_con_pdfplumber(pdf_path)
    explorar_con_pypdf2(pdf_path)
    
    # Buscar puntajes en el texto extra√≠do
    print("\n" + "="*80)
    print("AN√ÅLISIS DE CONTENIDO")
    print("="*80)
    
    try:
        with pdfplumber.open(pdf_path) as pdf:
            full_text = ""
            for page in pdf.pages:
                text = page.extract_text()
                if text:
                    full_text += text + "\n"
            
            buscar_puntajes_en_texto(full_text)
            
    except Exception as e:
        print(f"‚ùå Error en an√°lisis de contenido: {e}")
    
    print("\n" + "="*80)
    print("‚úÖ EXPLORACI√ìN COMPLETADA")
    print("="*80)
    print("\nRevisa la salida para determinar:")
    print("  1. ¬øQu√© librer√≠a extrae mejor el texto?")
    print("  2. ¬øD√≥nde est√°n ubicados los puntajes?")
    print("  3. ¬øHay tablas que podamos extraer?")
    print("  4. ¬øQu√© patrones podemos usar para extraer los datos?")
    print()

if __name__ == "__main__":
    main()

